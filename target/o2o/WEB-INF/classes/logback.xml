<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--定义参数常量-->
    <!--logback的级别大小：-->
    <!--TRACE < DEBUG < INFO < WARN < ERROR-->
    <!--logger.trace("msg") logger.debug...-->
    <property name="log.level" value="debug"/>
    <property name="log.maxHistory" value="30"/>
    <property name="log.filePath" value="${catalina.base}/logs/webapps"/>
    <!--日志的输出格式-->
    <!--%d{yyy-MM-dd HH:mm:ss.SSS}时间的格式-->
    <!--[%thead]输出是哪一个线程去执行的-->
    <!--%-5level输出是哪一个级别的日志-->
    <!--%logger{50}输出是哪一个package下面的哪一个类里面的信息-->
    <!--%msg信息-->
    <!--%n换行-->
    <property name="log.pattern"
              value="%d{yyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>

    <!--控制台设置-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--DEBUG-->
    <!--RollingFileAppender-
    (滚动)，文件会随着size的增大滚动出新的日志文件来，或者随着时间的推移按天、或者按月来生成新的日志文件-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/debug.log</file>
        <!--TimeBasedRollingPolicy-基于时间去滚动的-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名称-->
            <fileNamePattern>
                ${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!--文件最大保存历史数量-要保存多久-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--既将我们的日志信息转换成字符串，又将字符串输出到文件里面-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--作用：过滤掉不是debugLevel的日志，而只记录debugLevel的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--INFO-->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/info.log</file>
        <!--TimeBasedRollingPolicy-基于时间去滚动的-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名称-->
            <fileNamePattern>
                ${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!--文件最大保存历史数量-要保存多久-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--既将我们的日志信息转换成字符串，又将字符串输出到文件里面-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--作用：过滤掉不是infoLevel的日志，而只记录infoLevel的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--ERROR-->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/error.log</file>
        <!--TimeBasedRollingPolicy-基于时间去滚动的-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名称-->
            <fileNamePattern>
                ${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!--文件最大保存历史数量-要保存多久-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--既将我们的日志信息转换成字符串，又将字符串输出到文件里面-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--作用：过滤掉不是errorLevel的日志，而只记录errorLevel的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--logger - 主要用来存放日志对象，同时告诉logback需要关注哪个package下面的信息-->
    <!--logger里的name属性 - 指定需要关注的是哪个package-->
    <!--logger里的level属性 - 告诉logback该logger是仅记录哪一个Level以上的信息-->
    <logger name="com.imooc.o2o" level="${log.level}" additivity="true">
        <!--包含一个logger对象，logger会往下面这三个文件去输出信息-->
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>
    <!--特殊的logger，相当于根logger-->
    <!--补充：如果上面定义的logger并没有指定level，那它就会默认继承下面的这个level，也就是仅输出info级别以上的信息-->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>

</configuration>